/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        TWO_THREE: TWO_THREE {
            compatible = "zmk,behavior-tap-dance";
            label = "TWO_THREE";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>;

            tapping-term-ms = <150>;
        };

        ONE_THREE: ONE_THREE {
            compatible = "zmk,behavior-tap-dance";
            label = "ONE_THREE";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 3>;

            tapping-term-ms = <150>;
        };

        LS_CAPS: LS_CAPS {
            compatible = "zmk,behavior-tap-dance";
            label = "LS_CAPS";
            #binding-cells = <0>;
            bindings = <&SKQR LEFT_SHIFT>, <&kp CAPS>;
        };

        SK500: SK500 {
            compatible = "zmk,behavior-sticky-key";
            label = "SK500";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            ignore-modifiers;
        };

        SKQR: SKQR {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQR";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0 2 1>;
            timeout-ms = <50>;
        };

        combo_hyper_left {
            bindings = <&SK500 LS(LA(LC(LEFT_GUI)))>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_hyper_right {
            bindings = <&SK500 RS(RA(RC(RIGHT_GUI)))>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &kp E         &kp R       &kp T        &kp Y    &kp U       &kp I          &kp O    &kp P          &kp GRAVE
&kp LEFT_ALT  &kp A  &kp S  &kp D         &kp F       &kp G        &kp H    &kp J       &kp K          &kp L    &kp SEMICOLON  &kp SQT
&LS_CAPS      &kp Z  &kp X  &kp C         &kp V       &kp B        &kp N    &kp M       &kp COMMA      &kp DOT  &kp FSLH       &kp RIGHT_CONTROL
                            &kp LEFT_GUI  &ONE_THREE  &kp SPACE    &kp RET  &TWO_THREE  &kp BACKSPACE
            >;

            label = "Base";
        };

        symbols_layer {
            bindings = <
&kp TAB       &kp CARET        &kp HASH     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE    &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp AMPERSAND  &kp PIPE      &kp BACKSLASH
&kp LEFT_ALT  &kp EXCLAMATION  &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT       &kp MINUS  &kp LESS_THAN     &kp GREATER_THAN   &kp DOLLAR     &kp ASTERISK  &kp SLASH
&LS_CAPS      &none            &none        &none                 &none                  &none             &none      &none             &none              &none          &none         &kp RIGHT_CONTROL
                                            &kp LEFT_GUI          &ONE_THREE             &kp SPACE         &kp ENTER  &TWO_THREE        &kp BACKSPACE
            >;

            label = "Symbols";
        };

        numpad_layer {
            bindings = <
&kp TAB       &kp EQUAL     &kp SLASH     &kp ASTERISK  &kp MINUS     &kp PLUS        &none      &kp HOME    &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &none
&kp LEFT_ALT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &none      &kp LEFT    &kp DOWN       &kp UP_ARROW  &kp RIGHT  &none
&LS_CAPS      &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &none      &none       &none          &none         &none      &kp RIGHT_CONTROL
                                          &kp LEFT_GUI  &ONE_THREE    &kp SPACE       &kp ENTER  &TWO_THREE  &kp BACKSPACE
            >;

            label = "Numpad";
        };

        media_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR    &none  &none       &kp C_PREV         &kp C_NEXT       &none     &none
&none         &none         &none         &none         &none         &none         &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PP  &none
&none         &none         &none         &none         &none         &none         &none  &none       &none              &none            &none     &none
                                          &none         &to 0         &none         &none  &to 0       &none
            >;

            label = "Media";
        };
    };
};
